#!/bin/bash
# @Name:            Kolloid Station
# @Copyright:       @2023 by Johannes a.d.F. K r ä m e r

programmName="Kolloid Station";
programmVersion="1.6";
heizplatteRelais=7;
trafoRelais=8;
scriptPath=$(cd $(dirname "$0"); pwd);
libsPath="$scriptPath/libs";
soundPath="$scriptPath/sounds";
invoiceDir="/home/$(whoami)/KolloidProduktion/$(date +"%Y")";
trap ctrl_c INT;  # CTRL + C abfangen & Relais ausschalten #### FUNKTIONIERT NICHT IMMER ??!?!?!
function ctrl_c() {
    230V $heizplatteRelais 0 1;
    230V $trafoRelais 0 1;
    printf "\n\e[1;31m > !BYEBYE!\e[0m \n\n";
    exit 1;
99}
230V $heizplatteRelais 0 1;
230V $trafoRelais 0 1;
kolloidElementsArray=(au ag pt pd ir);
kolloidWaterSizeArray=(100 200 400 1000 2000);
source "$libsPath/pattern.sh" || exit 1; 
source "$libsPath/getENV.sh" || exit 1; 
source "$libsPath/colors.sh" || exit 1; 
source "$libsPath/functions.sh" || exit 1; 
source "$libsPath/startup.sh" || exit 1; 
source "$libsPath/getops.sh" || exit 1; 

clear;
showLogo;
# Heizplatten Zeiten & Zeit fürs Nachjustieren definieren
if (( ${size} == 100 )); then
    _endPlatte=480; # geprüft: 480 ok
    if [ $metal == "au" ]; then
        maxRuntime=900; # 15 Minuten
    elif [ $metal == "ag" ]; then
        maxRuntime=300; # 5 Minuten
    elif [ $metal == "pt" ]; then
        maxRuntime=900; # 15 minuten
    elif [ $metal == "pd" ]; then
        maxRuntime=1200; # 20 minuten 
    elif [ $metal == "ir" ]; then
        maxRuntime=1200; # 20 minuten
    fi
elif (( ${size} == 200 )); then
    _endPlatte=550; # geprüft: 550 ok
    if [ $metal == "au" ]; then
        maxRuntime=900; # 15 minuten
    elif [ $metal == "ag" ]; then
        maxRuntime=420; # 7 minuten
    elif [ $metal == "pt" ]; then
        maxRuntime=900; # 15 minuten
    elif [ $metal == "pd" ]; then
        maxRuntime=1200; # 20 minuten
    elif [ $metal == "ir" ]; then
        maxRuntime=1200; # 20 minuten
    fi
elif (( ${size} == 400 )); then
    _endPlatte=950; # nicht geprüft: ##################
    if [ $metal == "au" ]; then
        maxRuntime=720; # 15 minuten nachjustiert, prüfen
    elif [ $metal == "ag" ]; then
        maxRuntime=420; # 7 minuten ###################
    elif [ $metal == "pt" ]; then
        maxRuntime=900; # 15 minuten ##################
    elif [ $metal == "pd" ]; then
        maxRuntime=1200; # 20 minuten #################
    elif [ $metal == "ir" ]; then
        maxRuntime=1200; # 20 minuten ###############
    fi
elif (( ${size} == 1000 )); then
    _endPlatte=2070; # geprüft: 2070 ok
    if [ $metal == "au" ]; then
        maxRuntime=1200; # 20 minuten
    elif [ $metal == "ag" ]; then
        maxRuntime=540; # 9 minuten
    elif [ $metal == "pt" ]; then
        maxRuntime=1800; # 30 minuten
    elif [ $metal == "pd" ]; then
        maxRuntime=1800; # 30 minuten
    elif [ $metal == "ir" ]; then
        maxRuntime=1800; # 30 minuten
    fi
elif (( ${size} == 2000 )); then
    _endPlatte=5400;  # geprüft:  5400 ok
    if [ $metal == "au" ]; then
        maxRuntime=1200; # 20 minuten
    elif [ $metal == "ag" ]; then
        maxRuntime=480; # 8 minuten
    elif [ $metal == "pt" ]; then
        maxRuntime=3600; # 60 minuten
    elif [ $metal == "pd" ]; then
        maxRuntime=3600; # 60 minuten
    elif [ $metal == "ir" ]; then
        maxRuntime=3600; # 60 minuten
    fi
fi
# PPM Kalkulieren
# !!! Diese Werte sind nur farbliche Schätzwerte !!!
# Für eine genauere Produktion müssten mehrere Dispersionen
# mit verschiedenen Zeiten ins Labor eingesendet werden
# und die Differenz gemessen werden!!!
if [ $metal == "au" ]; then
    time=$(((($size/10)*9)*$ppm));
    if [ $size -gt 200 ]; then
        time=$(((($size/10)*8)*$ppm));
    fi
elif [ $metal == "ag" ]; then
    time=$((( ($size/10) * 3) * $ppm)); 
    if [ $size -gt 200 ]; then
        time=$(((($size/10) * 2) * $ppm));
    fi
elif [ $metal == "pt" ]; then
    time=$(((($size/2) * 23) * $ppm)); # #################################### ZEIT ERMITTELN !!!!! 
elif [ $metal == "pd" ]; then
    time=$(((($size/2) * 18) * $ppm)); # #################################### ZEIT ERMITTELN 
elif [ $metal == "ir" ]; then
    time=$(((($size/4) * 10) * $ppm)); # #################################### ZEIT ERMITTELN !!!!!!
fi

echo -e " .------------------------------------------------------------------------------.";
echo -e " | Material\\tMenge (ml)\\tPPM\\t\\tKochzeit\\tPlasmazeit\\t|";
echo -e " |------------------------------------------------------------------------------.";
echo -e " | ${metal}\\t\\t${size} ml\\t\\t${ppm} PPM\\t\\t$(date -d@$(($_endPlatte)) -u +%H:%M:%S)\\t $(date -d@$(( $time)) -u +%H:%M:%S)\\t|";
echo -e " *------------------------------------------------------------------------------*\n";
if [ $metal == "au" ]; then
    printf "\n > 1) Elektroden (${metal}) einspannen & Abstand so\n      klein wie möglich einstellen!\n";
elif [ $metal == "ag" ]; then
    printf "\n > 1) Elektroden (${metal}) einspannen & Abstand so \n      klein wie möglich einstellen!\n";
elif [ $metal == "pt" ]; then
    printf "\n > 1) Elektroden (${metal}) einspannen & Abstand so\n      klein wie möglich einstellen!\n";
elif [ $metal == "pd" ]; then
    printf "\n > 1) Baren (${metal}) einspannen & Abstand so\n      nah wie möglich einstellen!\n";
elif [ $metal == "ir" ]; then
    printf "\n > 1) Elektroden (${metal}) einspannen & Abstand so\n      klein wie möglich einstellen!\n";
fi
printf "\n > 2) ${size} ml Borosilikatglas bis zum Rand mit\n      H²O füllen & auf Heizplatte stellen!\n";
source "$libsPath/elektrodenPosition.sh" || exit 1; 
printf " > Taste drücken um fortzufahren oder beenden mit ctrl+c!";
read -n 1 -s -r -p "";
printf "\n\n";
clear;
OIFS=$IFS;
IFS=','; # Delimeter auf , setzen
for kunde in $kunde
do
    kundeTrim="$(echo -e "${kunde}" | sed -e 's/^[[:space:]]*//')";
    [ ! -d "$invoiceDir" ] && mkdir -p "$invoiceDir";
    echo "$(date +"%d.%m.%Y")|${size}ml|${metal^^}|(${ppm}PPM)|${kundeTrim^}" >> "$invoiceDir/$(date +"%m").txt";
done
IFS=$OIFS;
unset OIFS;
230V $heizplatteRelais 1 1;
for number in $(seq 0 ${_endPlatte}) # Progress Bar anzeigen
do
    sleep 1;
    ProgressBar ${number} ${_endPlatte} "$(date -d@$_endPlatte -u +%H:%M:%S) Aufheizen";
done
230V $heizplatteRelais 0 1;
rounds=$(($time/$maxRuntime));
[ $(($time % $maxRuntime)) -gt 0 ] && rounds=$(($rounds + 1));
[ $rounds -lt 1 ] && rounds=1;
echo -e "\n > Produktionsdauer: ~$(($time/60)) min";
if [ $rounds -gt 1 ]; then
    echo -e " > Nachjustieren jede: $(($maxRuntime/60)) min";
fi
for (( r=1; r<=$rounds; r++ ))
do 
    printf "\e[1;31m > TRAFO WIRD GLEICH EINGESCHALTET !!!ACHTUNG LEBENSGEFAHR!!! \e[0m \n";
    $soundPath/enableTrafo;
    230V $trafoRelais 1 1;
    [ $size -gt 200 ] && 230V $heizplatteRelais 1 1; # Wenn Menge >= 200 dann immer Köcheln
    if [ $size -lt 1000 ]; then # Kleine Mengen mit vielen Runden
        if [ $(($r % 2)) == 0 ]; then  # jede zweite Runde Köcheln für 4 Minuten
            230V $heizplatteRelais 1 1;
            230V $heizplatteRelais 0 240 & disown;
        fi
    fi
    [ $time -lt $maxRuntime ] && _endt=$time || _endt=$maxRuntime;
    for numbera in $(seq 0 ${_endt})
    do
        sleep 1;
        ProgressBar ${numbera} ${_endt} "Runde $r/$rounds";
    done
    230V $trafoRelais 0 1;
    230V $heizplatteRelais 0 1;
    time=$(($time - $_endt));
    if [ "$rounds" == "$r" ]; then
        printf "\n\e[1;33m > Produktion fertig! \e[0m \n\n";
        $soundPath/finishedTrafo & disown;
        exit 0;
    else
        $soundPath/disableTrafo & disown;
        printf "\n\e[1;31m > Elektroden neu positionieren und Taste drücken um fortzufahren oder beenden mit ctrl+c! \e[0m\n";
        read -n 1 -s -r -p "";
    fi
done
